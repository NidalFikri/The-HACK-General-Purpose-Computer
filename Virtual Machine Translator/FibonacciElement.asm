@256
D=A
@SP
M=D
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
//@256
//D=A
//@SP
//M=D
//@53
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@LCL
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@ARG
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THIS
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THAT
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//D=M-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//@ARG
//M=D
//@SP
//D=M
//@LCL
//M=D
//@Sys.init
//0;JMP
//(Main.fibonacci)
//@0
//D=A
//@ARG
//A=D+M
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@2
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//M=M-1
//A=M
//D=M
//A=A-1
//D=M-D
//@FibonacciElement1
//D;JLT
//@SP
//A=M
//A=A-1
//M=0
//@FibonacciElement1_end
//0;JMP
//(FibonacciElement1)
//@SP
//A=M
//A=A-1
//M=-1
//(FibonacciElement1_end)
//@SP
//M=M-1
//A=M
//D=M
//@IF_TRUE
//D;JNE
//@IF_FALSE
//0;JMP
//(IF_TRUE)
//@0
//D=A
//@ARG
//A=D+M
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@LCL
//D=M
//@14
//M=D
//A=M-1
//A=A-1
//A=A-1
//A=A-1
//A=A-1
//D=M
//@15
//M=D
//@0
//D=A
//@ARG
//D=D+M
//@R13
//M=D
//@SP
//M=M-1
//A=M
//D=M
//@R13
//A=M
//M=D
//@ARG
//D=M
//@SP
//M=D+1
//@14
//D=M-1
//M=D
//A=D
//D=M
//@THAT
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@THIS
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@ARG
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@LCL
//M=D
//@15
//A=M
//0;JMP
//(IF_FALSE)
//@0
//D=A
//@ARG
//A=D+M
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@2
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//M=M-1
//A=M
//D=M
//A=A-1
//M=M-D
//@239
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@LCL
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@ARG
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THIS
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THAT
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//D=M-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//@ARG
//M=D
//@SP
//D=M
//@LCL
//M=D
//@Main.fibonacci
//0;JMP
//@0
//D=A
//@ARG
//A=D+M
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@1
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//M=M-1
//A=M
//D=M
//A=A-1
//M=M-D
//@312
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@LCL
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@ARG
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THIS
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THAT
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//D=M-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//@ARG
//M=D
//@SP
//D=M
//@LCL
//M=D
//@Main.fibonacci
//0;JMP
//@SP
//M=M-1
//A=M
//D=M
//A=A-1
//M=D+M
//@LCL
//D=M
//@14
//M=D
//A=M-1
//A=A-1
//A=A-1
//A=A-1
//A=A-1
//D=M
//@15
//M=D
//@0
//D=A
//@ARG
//D=D+M
//@R13
//M=D
//@SP
//M=M-1
//A=M
//D=M
//@R13
//A=M
//M=D
//@ARG
//D=M
//@SP
//M=D+1
//@14
//D=M-1
//M=D
//A=D
//D=M
//@THAT
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@THIS
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@ARG
//M=D
//@14
//D=M-1
//M=D
//A=D
//D=M
//@LCL
//M=D
//@15
//A=M
//0;JMP
//(Sys.init)
//@4
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@435
//D=A
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@LCL
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@ARG
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THIS
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@THAT
//D=M
//@SP
//A=M
//M=D
//@SP
//M=M+1
//@SP
//D=M-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//D=D-1
//@ARG
//M=D
//@SP
//D=M
//@LCL
//M=D
//@Main.fibonacci
//0;JMP
//(WHILE)
//@WHILE
//0;JMP
//function Main.fibonacci 0
(Main.fibonacci)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt                     // checks if n<2
@SP
M=M-1
A=M
D=M
A=A-1
D=M-D
@Main1
D;JLT
@SP
A=M
A=A-1
M=0
@Main1_end
0;JMP
(Main1)
@SP
A=M
A=A-1
M=-1
(Main1_end)
//if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE
//goto IF_FALSE
@IF_FALSE
0;JMP
//label IF_TRUE          // if n<2, return n
(IF_TRUE)
//push argument 0        
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
@LCL
D=M
@14
M=D
A=M-1
A=A-1
A=A-1
A=A-1
A=A-1
D=M
@15
M=D
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
@SP
M=D+1
@14
D=M-1
M=D
A=D
D=M
@THAT
M=D
@14
D=M-1
M=D
A=D
D=M
@THIS
M=D
@14
D=M-1
M=D
A=D
D=M
@ARG
M=D
@14
D=M-1
M=D
A=D
D=M
@LCL
M=D
@15
A=M
0;JMP
//label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//call Main.fibonacci 1  // computes fib(n-2)
@239
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//call Main.fibonacci 1  // computes fib(n-1)
@312
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
//add                    // returns fib(n-1) + fib(n-2)
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
//return
@LCL
D=M
@14
M=D
A=M-1
A=A-1
A=A-1
A=A-1
A=A-1
D=M
@15
M=D
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
@ARG
D=M
@SP
M=D+1
@14
D=M-1
M=D
A=D
D=M
@THAT
M=D
@14
D=M-1
M=D
A=D
D=M
@THIS
M=D
@14
D=M-1
M=D
A=D
D=M
@ARG
M=D
@14
D=M-1
M=D
A=D
D=M
@LCL
M=D
@15
A=M
0;JMP
//function Sys.init 0
(Sys.init)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1   // computes the 4'th fibonacci element
@435
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
//label WHILE
(WHILE)
//goto WHILE              // loops infinitely
@WHILE
0;JMP
